from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.markdown import hbold
import re
from datetime import datetime

import app.keyboards as kb
from app.database import Database

router = Router()
db = Database()


class FeedbackStates(StatesGroup):
    rating = State()
    name = State()
    email = State()
    phone = State()
    message = State()


async def show_main_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ 30–±–∏—Ç!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        reply_markup=kb.main
    )


@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
async def back_to_menu(message: Message):
    await show_main_menu(message)


@router.message(F.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏')
async def about_company(message: Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω–∏—è 30–±–∏—Ç - –ª–∏–¥–µ—Ä –≤ IT-—Ä–µ—à–µ–Ω–∏—è—Ö —Å 2010 –≥–æ–¥–∞.\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å.",
        reply_markup=kb.back_to_menu
    )


@router.message(F.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def start_feedback(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é:",
        reply_markup=kb.mark
    )
    await state.set_state(FeedbackStates.rating)


@router.callback_query(F.data.in_(['one', 'two', 'three', 'four', 'five']), FeedbackStates.rating)
async def process_rating(callback: CallbackQuery, state: FSMContext):
    rating_map = {
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5
    }

    rating = rating_map[callback.data]
    stars = '‚≠ê' * rating

    try:
        await callback.message.delete()
    except:
        pass

    await state.update_data(rating=rating)
    await callback.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} {stars}")

    await callback.message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {stars}!\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=kb.back_to_menu
    )
    await state.set_state(FeedbackStates.name)


@router.message(F.text == '–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤')
async def show_feedbacks(message: Message):
    feedbacks = db.get_feedbacks()
    if not feedbacks:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=kb.back_to_menu)
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
    for i, feedback in enumerate(feedbacks, 1):
        stars = '‚≠ê' * feedback['rating']
        response += (
            f"{hbold(f'–û—Ç–∑—ã–≤ #{i}')}\n"
            f"–û—Ü–µ–Ω–∫–∞: {stars}\n"
            f"–ò–º—è: {feedback['name']}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {feedback['message']}\n"
            f"–î–∞—Ç–∞: {datetime.strptime(feedback['created_at'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}\n\n"
        )

    await message.answer(response, reply_markup=kb.back_to_menu)


@router.message(FeedbackStates.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–ø—Ä–∏–º–µ—Ä: example@mail.com):")
    await state.set_state(FeedbackStates.email)


@router.message(FeedbackStates.email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@mail.com:")
        return

    await state.update_data(email=email)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, 11 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 89123456789):")
    await state.set_state(FeedbackStates.phone)


@router.message(FeedbackStates.phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    if not re.match(r'^8\d{10}$', phone):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 8 –∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 11 —Ü–∏—Ñ—Ä:")
        return

    await state.update_data(phone=phone)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(FeedbackStates.message)


@router.message(FeedbackStates.message)
async def process_message(message: Message, state: FSMContext):
    data = await state.get_data()
    data['message'] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_feedback(data)

    stars = '‚≠ê' * data['rating']
    response = (
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
        f"{hbold('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:')}\n"
        f"–û—Ü–µ–Ω–∫–∞: {stars}\n"
        f"–ò–º—è: {data['name']}\n"
        f"Email: {data['email']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}\n\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )

    await message.answer(response, reply_markup=kb.back_to_menu)
    await state.clear()